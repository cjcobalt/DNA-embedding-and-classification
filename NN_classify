#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import DNAprocess as Dp
import numpy as np
from pyfasta import Fasta
import tensorflow as tf
from tensorflow.contrib.tensorboard.plugins import projector
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import pickle
import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'

# import data and equalize number in classes
data = Fasta('./TEST/S12/seqs.fa')
DNA = Dp.DNAdata(data)
seq_train_kmer, label_train_kmer = DNA.equalize(1000)

# choose training and testing data
index = list(i for i in range(len(label_train_kmer)))
chosen = np.random.choice(index, round(0.8*len(label_train_kmer)), replace=False)
unchosen = set(index)-set(chosen)
print('\nAll data:', len(label_train_kmer), 'training data:', len(chosen), 'testing data: %d\n' % len(unchosen))
label_train = []
seq_train = []
label_test = []
seq_test = []
for ind in index:
    if ind in chosen:
        label_train.append(label_train_kmer[ind])
        seq_train.append(seq_train_kmer[ind])
    else:
        label_test.append(label_train_kmer[ind])
        seq_test.append(seq_train_kmer[ind])
trainable = Dp.speciestable(label_train)
print('training data', trainable)
testable = Dp.speciestable(label_test)
print('testing data', testable)

# label for training data
label_vec=[]
label_num = []
for l in label_train:
    l_vec = [0, 0, 0, 0, 0, 0]
    l_vec[int(l[8])] = 1
    label_num.append(int(l[8])+1)
    label_vec.append(l_vec)

# label for testing data
label_vec_test=[]
label_num_test = []
for l in label_test:
    l_vec_test = [0, 0, 0, 0, 0, 0]
    l_vec_test[int(l[8])] = 1
    label_num_test.append(int(l[8])+1)
    label_vec_test.append(l_vec_test)

k = 6
VecModel = pickle.load(open('kmer_model/Model_100_10.pickle', 'rb'))
print('\nEmbedded into 100 dimension')
print('the number in vocabulary is %d\n' % (len(VecModel.wv.vocab)))


# Generate DNA sequence Vector with 4 methods
# training
DNA_sequence_train = Dp.DNAsequence(VecModel, seq_train, label_train, k)
DNA_vec_train = DNA_sequence_train.meanvec()
print(len(DNA_vec_train))
# testing
DNA_sequence_test = Dp.DNAsequence(VecModel, seq_test, label_test, k)
DNA_vec_test = DNA_sequence_test.meanvec()
print(len(DNA_vec_test[1]))


# Build a Softmax Regression Model
sess = tf.InteractiveSession()
input_vec = tf.placeholder(tf.float32, shape=[None, len(DNA_vec_test[0])])
output_species = tf.placeholder(tf.float32, shape=[None, k])

W = tf.Variable(tf.ones([len(DNA_vec_test[0]), k]))
tf.summary.histogram("Weight", W)
b = tf.Variable(tf.ones([6]))
sess.run(tf.global_variables_initializer())
y = tf.nn.softmax(tf.matmul(input_vec, W) + b)


with tf.name_scope('cross_entropy'):
    diff = output_species * tf.log(y)
    with tf.name_scope('total'):
        cross_entropy = -tf.reduce_mean(diff)
    tf.summary.scalar('cross entropy', cross_entropy)

train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)
for _ in range(1000):
  train_step.run(feed_dict={input_vec: DNA_vec_train, output_species: label_vec})


# Evaluate the Model
with tf.name_scope('accuracy'):
    with tf.name_scope('correct_prediction'):
        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(output_species, 1))
    with tf.name_scope('accuracy'):
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    tf.summary.scalar('accuracy', accuracy)

print('classification accuracy on training set',
      accuracy.eval(feed_dict={input_vec: DNA_vec_train, output_species: label_vec}))
print('classification accuracy on testing set',
      accuracy.eval(feed_dict={input_vec: DNA_vec_test, output_species: label_vec_test}))

# tensor-board
with tf.Session() as sess:
    # Step 10 create a log writer. run 'tensorboard --logdir=./logs/nn_logs'
    writer = tf.summary.FileWriter("logs/NN_logs", sess.graph) # for 0.8
    merged = tf.summary.merge_all()

    # Step 11 you need to initialize all variables
    tf.global_variables_initializer().run()
    for i in range(1000):
        train_step.run(feed_dict={input_vec: DNA_vec_train, output_species: label_vec})
        summary, acc = sess.run([merged, accuracy], feed_dict={input_vec: DNA_vec_train, output_species: label_vec})
        writer.add_summary(summary, i)  # Write summary


# embedding
LOG_DIR = './logs/NN_logs'
print('doing embedding')
DNA_vec = np.array(DNA_vec_test)

# Generate meta data
#metadata = os.path.join('metadata.tsv')
np.savetxt(os.getcwd() + '/logs/NN_logs/metadata_NN.tsv', label_num_test, fmt='%d')
embed_vec = tf.Variable(DNA_vec, name='embedding')

with tf.Session() as sess:
    saver = tf.train.Saver([embed_vec])
    sess.run(embed_vec.initializer)
    saver.save(sess, os.path.join(LOG_DIR, 'embed_vec.ckpt'))

    config = projector.ProjectorConfig()
    # One can add multiple embeddings.
    embedding = config.embeddings.add()
    embedding.tensor_name = embed_vec.name
    # Link this tensor to its metadata file (e.g. labels).
    embedding.metadata_path = os.getcwd()+'/logs/NN_logs/metadata_NN.tsv'
    # Saves a config file that TensorBoard will read during startup.
    projector.visualize_embeddings(tf.summary.FileWriter(LOG_DIR), config)

print('Done. Embedded.')

# PCA 2D
pca=PCA(n_components=2)
pca.fit(DNA_vec_test)
visual2d = pca.transform(DNA_vec_test)
visualx = []
visualy = []
for v2d in visual2d:
    visualx.append(v2d[0])
    visualy.append(v2d[1])

plt.figure()
for i in range(len(visual2d)):
    if label_num_test[i]==1:
        plt.plot(visualx[i], visualy[i], 'ro')
    elif label_num_test[i]==2:
        plt.plot(visualx[i], visualy[i], 'go')
    elif label_num_test[i]==3:
        plt.plot(visualx[i], visualy[i], 'bo')
    elif label_num_test[i]==4:
        plt.plot(visualx[i], visualy[i], 'co')
    elif label_num_test[i]==5:
        plt.plot(visualx[i], visualy[i], 'mo')
    elif label_num_test[i]==6:
        plt.plot(visualx[i], visualy[i], 'yo')
plt.show()
